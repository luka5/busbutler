/*
 * File: app/view/Root.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.Root', {
    extend: 'Ext.Container',

    config: {
        id: 'root',
        layout: {
            type: 'card'
        },
        items: [
            {
                xtype: 'list',
                id: 'stationList',
                itemId: 'mylist',
                itemTpl: [
                    '<div>{key}</div>'
                ],
                store: 'stations',
                grouped: true,
                indexBar: true,
                items: [
                    {
                        xtype: 'toolbar',
                        docked: 'top',
                        items: [
                            {
                                xtype: 'searchfield',
                                id: 'mysearchfield',
                                itemId: 'mysearchfield',
                                label: ''
                            }
                        ]
                    }
                ]
            },
            {
                xtype: 'list',
                id: 'departureTimeList',
                itemId: 'mylist1',
                itemTpl: [
                    '<div>{line} {direction} in {countdown} min <tpl if="isRealTime"><img src="./realtime.png" style="vertical-align: middle; height: 16px;" /></tpl></div>'
                ],
                store: 'departureTimes',
                items: [
                    {
                        xtype: 'toolbar',
                        docked: 'top',
                        items: [
                            {
                                xtype: 'button',
                                itemId: 'mybutton',
                                text: 'zur Übersicht'
                            },
                            {
                                xtype: 'label',
                                id: 'departureLabel',
                                flex: 1
                            }
                        ]
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onMysearchfieldKeyup',
                event: 'keyup',
                delegate: '#mysearchfield'
            },
            {
                fn: 'onMysearchfieldClearicontap',
                event: 'clearicontap',
                delegate: '#mysearchfield'
            },
            {
                fn: 'onMylistSelect',
                event: 'select',
                delegate: '#stationList'
            },
            {
                fn: 'onMybuttonTap',
                event: 'tap',
                delegate: '#mybutton'
            },
            {
                fn: 'onDepartureTimeListUpdateList',
                event: 'updateList',
                delegate: '#departureTimeList'
            },
            {
                fn: 'onRootChangeList',
                event: 'changeList'
            },
            {
                fn: 'onRootInitialize',
                event: 'initialize'
            },
            {
                fn: 'onRootGeopositionChangeD',
                event: 'geopositionChanged'
            }
        ]
    },

    onMysearchfieldKeyup: function(textfield, e, options) {
        if(this.filterTask === undefined)
        this.filterTask = new Ext.util.DelayedTask(this.executeSearch, this);

        this.filterTask.delay(300);
    },

    onMysearchfieldClearicontap: function(text, e, options) {
        if(this.filterTask === undefined)
        this.filterTask = new Ext.util.DelayedTask(this.executeSearch, this);

        this.filterTask.delay(0);
    },

    onMylistSelect: function(dataview, record, options) {
        Ext.getCmp("root").fireEvent("changeList", record.get("swuid"));
    },

    onMybuttonTap: function(button, e, options) {
        Ext.getCmp("stationList").deselectAll();
        this.clearInterval();
        
        Ext.getCmp("root").fireEvent("changeList", undefined);
    },

    onDepartureTimeListUpdateList: function() {
        this.initInterval(10000);
    },

    onRootChangeList: function(swuid) {
        
        var url = "";
        var card = Ext.getCmp("stationList");
        if(swuid !== undefined){
            url = "station/" + swuid;
            card = Ext.getCmp("departureTimeList");
            localStorage["swuid"] = swuid;
            Ext.getCmp("departureTimeList").fireEvent("updateList");
        }else{
            delete localStorage["swuid"];
        }
        this.setActiveItem(card);
        
        /*
         * set url, prevent change event
         */
        app.getHistory().add(Ext.create('Ext.app.Action', {
            url: url
        }), true);
    },

    onRootInitialize: function(component, options) {
        this.watchID = navigator.geolocation.watchPosition(
            function(position){
                component.fireEvent("geopositionChanged", {latitude: position.coords.latitude, longitude: position.coords.longitude});
            },
            function(){
                alert("Fehlerhafte Ortung.");
//                 alert(JSON.stringify(arguments));
            },
            { frequency: 3000, enableHighAccuracy: true }
        );
        
        /*
         * set stations url and load first time
         */
        var stationsStore = Ext.getCmp("stationList").getStore();
        var stationsStoreProxy = stationsStore.getProxy();
        var url = baseUrl + stationsStoreProxy.getUrl();
        stationsStoreProxy.setUrl(url);
        stationsStore.load();
    },

    onRootGeopositionChangeD: function(opts, event) {
        var url = baseUrl + "/allByCoords?coords=" + JSON.stringify([opts.longitude, opts.latitude]);
        Ext.Ajax.request({
            url: url,
            success: function(response){
                
                var stationsStore = Ext.getCmp("stationList").getStore();
                var record = stationsStore.findRecord("group", "1. Nächste Stationen");
                while(record !== null){
                    stationsStore.remove(record);
                    record = stationsStore.findRecord("group", "1. Nächste Stationen");
                }

                var text = JSON.parse(response.responseText);
                var stationModel = stationsStore.getModel();
                for(var i = 0; i < text.rows.length ; i++){
                    var station = new stationModel();
                    station.set("swuid", text.rows[i].id);
                    station.set("key", text.rows[i].location);
                    station.set("value", text.rows[i].oldid);
                    station.set("group", "1. Nächste Stationen");
                    stationsStore.add(station);
                }
            }
        });
    },

    executeSearch: function() {
        var search = Ext.getCmp("mysearchfield").getValue().split(" ");
        Ext.getCmp("stationList").getStore().clearFilter();
        Ext.getCmp("stationList").getStore().filterBy(
        function(record){
            var key = record.get("key");
            for(var i in search){
                if(key.toLowerCase().indexOf(search[i].toLowerCase()) === -1)
                return;
            }
            return key;
        }
        );
    },
    
    initInterval: function(time) {
        /*
        * Ext.TaskManager ist in Sencha Touch 2 leider nicht verfügbar, also:
        * setInterval definiert, das den Store alle "time" sekunden aufruft
        * initial muss die funktion von hand aufgerufen werden, damit sie nicht erst nach time aufgerufen wird.
        */
        if(time){
            this.time = time;
        }

        var fn = function(){
            var swuid = localStorage["swuid"];
            var url = baseUrl + '/departure-times/' + swuid;
            Ext.getCmp("departureTimeList").getStore().load({
                url: url
            });
        };
        this.interval = setInterval(fn, this.time);

        fn();
    },

    forceInterval: function() {
        /*
        * Lösche aktuelles Interval und erstelle neues exakt gleich.
        * Neues Interval wird sofort ausgeführt!
        */

        this.clearInterval();
        this.initInterval();
    },

    clearInterval: function() {
        clearInterval(this.interval);
    }

});