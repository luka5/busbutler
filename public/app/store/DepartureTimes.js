/*
 * File: app/store/DepartureTimes.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.store.DepartureTimes', {
    extend: 'Ext.data.Store',

    config: {
        storeId: 'departureTimes',
        proxy: {
            type: 'ajax',
            reader: {
                type: 'json',
                rootProperty: 'rows'
            }
        },
        fields: [
            {
                name: 'countdown'
            },
            {
                name: 'direction'
            },
            {
                name: 'line'
            },
            {
                name: 'platform'
            },
            {
                name: 'isRealTime'
            },
            {
                name: 'timetable'
            }
        ],
        listeners: [
            {
                fn: 'onJsonstoreLoad',
                event: 'load'
            }
        ]
    },

    constructor: function() {
        var me = this;
        me.callParent(arguments);
        me.getProxy().on([{
            fn: 'onAjaxproxyException',
            event: 'exception',
            scope: me
        }]);
    },

    onAjaxproxyException: function(server, response, operation, options) {
        alert("Problem loading data, please retry.");
    },

    onJsonstoreLoad: function(store, records, successful, operation, eOpts) {
        var response = JSON.parse(operation._response.responseText);
        var lastUpdate = new Date(response.lastUpdate);
        var lastUpdateString = lastUpdate.getHours() + ":" + (lastUpdate.getMinutes() < 10 ? "0":"") + lastUpdate.getMinutes();
        Ext.getCmp("departureLabel").lastUpdate = lastUpdateString;

        var stationsStore = Ext.getCmp("stationList").getStore();
        if(stationsStore.getCount() == 0){
            /*
             * if stationsStore is empty wait until it is loaded
             */
            stationsStore.on("load", this.setTitle, this);
        }else{
            this.setTitle();
        }
    },
    
    setTitle: function(){
        /*
         * get location name by swuid and stations Store
         */
        var location = "";
        var swuid = localStorage["swuid"];
        var record = Ext.getCmp("stationList").getStore().findRecord("swuid", swuid);
        if(record != null)
            location = record.get("key");
        
        var lastUpdate = Ext.getCmp("departureLabel").lastUpdate;
        
        /*
         * update title bar
         */
        Ext.getCmp("departureLabel").setHtml(lastUpdate + " Uhr <br />" + location);
    }

});